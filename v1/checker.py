from selenium.webdriver.firefox.options import Options
from email.mime.multipart import MIMEMultipart
from email.mime.base import MIMEBase
from selenium import webdriver
from PIL import Image
from tqdm import tqdm
import webbrowser
from email import encoders
import smtplib
import requests
import time
import os

pdf = 'hash/hash_report.pdf'
firefox_options = Options()
firefox_options.add_argument('--headless')
driver = webdriver.Firefox(options=firefox_options,
                           executable_path='write here path for your geckodriver')
driver.set_window_size(2048, 1536)
# session_id = driver.session_id
# print(session_id)  # check session


def save_obj():

    with open('hash/hash_list.txt', 'r') as file1:

        r = requests.head('https://www.virustotal.com/gui/home/search')
        if r.status_code == 200 or r.status_code == 405:

            for line in file1:
                chain = ('https://www.virustotal.com/gui/file/' + line)
                driver.get(chain)
                time.sleep(1)
                driver.get_screenshot_as_file('temp_img/main.png')

                driver.get(chain + '/details')
                time.sleep(1)
                driver.get_screenshot_as_file('temp_img/details.png')

                driver.get(chain + '/relations')
                time.sleep(1)
                driver.get_screenshot_as_file('temp_img/relations.png')

                driver.get(chain + '/behavior')
                time.sleep(1)
                driver.get_screenshot_as_file('temp_img/behavior.png')

                driver.get(chain + '/community')
                time.sleep(1)
                driver.get_screenshot_as_file('temp_img/community.png')
            driver.close()
        else:
            print('Service is unavailable')
            print('Wait', 60, 'seconds!')
            time.sleep(60)
            build()


def report(pdf):

    header = Image.open('header.png')

    im1 = Image.open('temp_img/main.png')
    im1_new = Image.new('RGB', im1.size, (255, 255, 255))
    im1_new.paste(im1, mask=im1.split()[3])

    im2 = Image.open('temp_img/details.png')
    im2_new = Image.new('RGB', im2.size, (255, 255, 255))
    im2_new.paste(im2, mask=im2.split()[3])

    im3 = Image.open('temp_img/relations.png')
    im3_new = Image.new('RGB', im3.size, (255, 255, 255))
    im3_new.paste(im3, mask=im3.split()[3])

    im4 = Image.open('temp_img/behavior.png')
    im4_new = Image.new('RGB', im4.size, (255, 255, 255))
    im4_new.paste(im4, mask=im4.split()[3])

    im5 = Image.open('temp_img/community.png')
    im5_new = Image.new('RGB', im5.size, (255, 255, 255))
    im5_new.paste(im5, mask=im5.split()[3])

    im_list = [im1_new, im2_new, im3_new, im4_new, im5_new]

    header.save(pdf, "PDF", resolution=100.0, save_all=True, append_images=im_list)


def send_mail(pdf):
    sender = 'write here your mail'
    password = 'write here password of your mail account'
    receiver = 'write here your target mail'

    message = MIMEMultipart()
    message['From'] = sender
    message['To'] = receiver
    message['Subject'] = 'Virustotal Report'

    # open the file in binary
    binary_pdf = open(pdf, 'rb')
    payload = MIMEBase('application', 'octate-stream', Name=pdf)
    payload.set_payload((binary_pdf).read())

    # enconding the binary into base64
    encoders.encode_base64(payload)

    # add header with pdf name
    payload.add_header('Content-Decomposition', 'attachment', filename=pdf)
    message.attach(payload)

    # use gmail with port
    session = smtplib.SMTP('smtp.gmail.com', 587)

    # enable security
    session.starttls()

    # login with mail_id and password
    session.login(sender, password)

    text = message.as_string()
    session.sendmail(sender, receiver, text)
    session.quit()


def clean(pdf):
    path = 'temp_img'
    for f in os.listdir(path):
        os.remove(os.path.join(path, f))
    if os.path.exists(pdf):
        webbrowser.open_new(pdf)
        #os.remove(pdf) add it if you want momently delete report it anyway sent on mail
    else:
        print('The file does not exist')


def build():
    for i in tqdm(range(4)):
        if i == 0:
            save_obj()
            time.sleep(1)
        elif i == 1:
            report(pdf)
            time.sleep(1)
        elif i == 2:
            send_mail(pdf)
            time.sleep(1)
        elif i == 3:
            clean(pdf)
            time.sleep(1)


if __name__ == '__main__':
    build()
    print('-------Mail Sent successfully-------')